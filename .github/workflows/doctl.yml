# This will destroy the existing DigitalOcean droplet then create a new one and downlaod the image the repo

name: Doctl flow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # push:
  #   branches: [ master ]
#   pull_request:
#     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
env:
  DIGITALOCEAN_DROPLET: ${{ secrets.DIGITALOCEAN_DROPLET }}
  DIGITALOCEAN_SSH_KEY_NAME: ${{ secrets.DIGITALOCEAN_SSH_KEY_NAME }}
  SIZE: 8gb

jobs:
  build:
    name: Set-up  
    runs-on: ubuntu-latest
    steps:

    - name: Checkout master
      uses: actions/checkout@master

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    # - name: Destroy DIGITALOCEAN_DROPLET 
    #   run: |
    #     echo "- Destroying the droplet"
    #     # delete the droplets
    #     doctl compute droplet delete -f "${DROPLET}"

    - name: Get a DigitalOcean SSH key
      run: |
            SSH_ID=$(doctl compute ssh-key list | grep -i "$DIGITALOCEAN_SSH_KEY_NAME" | cut -d' ' -f1)
            echo "SSH_ID=$SSH_ID" >> $GITHUB_ENV
            SSH_KEY=$(doctl compute ssh-key get "${SSH_ID}" --format FingerPrint --no-header)
            echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV

    - name: Create DIGITALOCEAN_DROPLET
      run: |
            echo "- Creating the droplet"
            doctl compute droplet create "$DIGITALOCEAN_DROPLET" \
                --region "nyc2" \
                --image ubuntu-20-10-x64 \
                --size "${SIZE}" \
                --ssh-keys "${SSH_KEY}" \
                --enable-ipv6 \
                --enable-monitoring \
                --wait
            # get the public ip of the node
            ID=$(doctl compute droplet list | grep "$DIGITALOCEAN_DROPLET" | cut -d' ' -f1)
            echo "ID=$ID" >> $GITHUB_ENV
            PUBLIC_IP=$(doctl compute droplet get "${ID}" --format PublicIPv4 --no-header)
            echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Download the repo
      run: |
            echo "- Downloading the repo"
            curl -s https://raw.githubusercontent.com/WCurtG/rasax-helm/master/download | sudo bash && cd rasax-helm
