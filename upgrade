#!/bin/bash

# Helper functions
EXTERNAL_IP=$(curl -s http://whatismyip.akamai.com/)

echo_success() {
  echo -e "\e[32m${1}\e[0m"
}

echo_bold() {
  echo -e "\e[1m${1}\e[0m"
}

fatal() {
  echo "$@" >&2
  exit 1
}

seperator() {
  yes = | head -n$(($(tput cols) * 1)) | tr -d '\n'
  printf "\n \n $($1 "$2") \n \n"
  yes = | head -n$(($(tput cols) * 1)) | tr -d '\n'
}


namespace_exist () {
  # Return failure if it doesn't exist or is no executable
  microk8s.kubectl get ns "$1" >/dev/null || return 1

  return 0
}

create_namespace() {
  echo Creating namespace "$NAME_SPACE"....
  namespace_exist "$NAME_SPACE" && ( seperator echo_success "microk8s.kubectl namespace "$NAME_SPACE" already exist" && rebuild_namespace ) ||
  ( cd "$HOME" &&
    microk8s.kubectl create namespace "$NAME_SPACE" ) &&
    ( seperator echo_success "microk8s.kubectl namespace "$NAME_SPACE" has been created" ) || 
    ( seperator echo_bold "microk8s.kubectl namespace "$NAME_SPACE" failed to be created." && fatal "Rasa X Helm Install Failed" )
}

rebuild_namespace() {
  read -e -p "Would you like to rebuild "$NAME_SPACE"? [Y/n] " YN
  [[ $YN == "y" || $YN == "Y" || $YN == "" ]] &&
  ( cd "$HOME" && microk8s.kubectl delete namespace "$NAME_SPACE" ) ||
  upgrade_namespace
}

upgrade_namespace() {
  cd "$HOME" && 
  microk8s.helm3 --namespace $NAME_SPACE upgrade --values values.yml my-release rasa-x/rasa-x
}

# This will be run when the user is propmted to create a password or let the system create one.
generate_not_yet_specified_passwords() {
  PASSWORD_SALT=$(get_specified_password_or_generate "${PASSWORD_SALT}") &&
  RASA_X_TOKEN=$(get_specified_password_or_generate "${RASA_X_TOKEN}") &&
  INITIAL_USER_PASSWORD=$(get_specified_password_or_generate "${INITIAL_USER_PASSWORD}") &&
  RASA_TOKEN=$(get_specified_password_or_generate "${RASA_TOKEN}") &&
  RABBITMQ_PASSWORD=$(get_specified_password_or_generate "${RABBITMQ_PASSWORD}") &&
  POSTGRES_PASSWORD=$(get_specified_password_or_generate "${POSTGRES_PASSWORD}") &&
  REDIS_PASSWORD=$(get_specified_password_or_generate "${REDIS_PASSWORD}") &&
  update_values
}

# Generates a random password when feed nothing.
get_specified_password_or_generate() {
  if [[ -z $1 ]]; then
    # shellcheck disable=SC2005
    echo "$(tr </dev/urandom -dc 'A-Za-z0-9' | head -c20)"
  else
    echo "$1"
  fi
}

update_values() {
  cd "$HOME"/rasax-helm-master &&
    # Update the values.yaml file
    sed "s/PASSWORD_SALT/${PASSWORD_SALT}/ ; s/RASA_X_TOKEN/${RASA_X_TOKEN}/ ; s/INITIAL_USER_PASSWORD/${INITIAL_USER_PASSWORD}/ ; s/RASA_TOKEN/${RASA_TOKEN}/ ; s/RABBITMQ_PASSWORD/${RABBITMQ_PASSWORD}/ ; s/POSTGRES_PASSWORD/${POSTGRES_PASSWORD}/ ; s/REDIS_PASSWORD/${REDIS_PASSWORD}/ ; s/EXTERNAL_IP/${EXTERNAL_IP}/ " temp_values.yml > tmp.yml && 
    mv tmp.yml values.yml &&
    mv -f values.yml "$HOME" &&
    ( seperator echo_success "\n We have updated your temp_values.yml file and renamed it, values.yml file with updated \n \n EXTERNAL_IP : ${EXTERNAL_IP} \n \n INITIAL_USER_PASSWORD : ${INITIAL_USER_PASSWORD} \n \n Review the "$HOME"/values.yml file to find and update other advanced deployment information \n" ) &&
    deploy_helm
}

deploy_helm() {
  cd "$HOME" &&
    microk8s.helm3 repo add rasa-x https://rasahq.github.io/rasa-x-helm >${REDIRECT} &&
    microk8s.helm3 --namespace "$NAME_SPACE" install --values values.yml my-release rasa-x/rasa-x &&
    seperator echo_success "microk8s.helm3 --namespace "$NAME_SPACE" using values.yml has been installed" || seperator echo_bold "microk8s.helm3 --namespace "$NAME_SPACE" install Failed" &&
    echo_success "Open in your browser here http://$EXTERNAL_IP:8000/api/version to check the api status and version \n \n Or run this command in your cli \n \n microk8s.kubectl --namespace "$NAME_SPACE" get services && curl http://$EXTERNAL_IP/api/version" &&
    microk8s.kubectl --namespace "$NAME_SPACE" get services &&
    # curl http://$EXTERNAL_IP:8000/api/version &&
    seperator echo_bold "Next we will start Octant it will be available at http://$EXTERNAL_IP:8002/#/" &&
    provide_login_credentials
}

provide_login_credentials() {
  # Explain how to access Rasa X
  echo -e "The deployment is ready ðŸ¤–. "

  # Determine the public IP address
  PUBLIC_IP=$(curl -s http://whatismyip.akamai.com/)
  LOGIN_URL="http://${EXTERNAL_IP}:8000/login?username=me&password=${INITIAL_USER_PASSWORD}"

  # Check if the URL is available over the public IP address
  STATUSCODE=$(curl --silent --connect-timeout 10 --output /dev/null --write-out "%{http_code}" "${LOGIN_URL}" || true)
  if test "$STATUSCODE" -ne 200; then
    # Determine the local IP address associated with a default gateway
    LOCAL_IP_ADDRESS=$(ip r g 8.8.8.8 | head -1 | awk '{print $7}')
    # Return the URL with the local IP address if the login webside is not available over the public address
    LOGIN_URL="http://${LOCAL_IP_ADDRESS}:8000/login?username=me&password=${INITIAL_USER_PASSWORD}"
  fi

  echo_success "You can now access Rasa X on this URL: ${LOGIN_URL}"
}

start_octant() {
  read -e -p "Would you like to start octant? [Y/n] " YN
  [[ $YN == "y" || $YN == "Y" || $YN == "" ]] &&
    OCTANT_LISTENER_ADDR=0.0.0.0:8002 octant --disable-open-browser
}

read -e -p "Please provide a name for you microk8s deployment: default [my-namespace] " NAME_SPACE
NAME_SPACE=${NAME_SPACE:-my-namespace} &&
create_namespace &&
read -e -p "Please set your unique Rasa X password or leave blank and we will set a secure password for you and add it to your values.yml file in the root. " PW
[[ $PW != "" ]] && INITIAL_USER_PASSWORD=$PW &&
generate_not_yet_specified_passwords &&
start_octant